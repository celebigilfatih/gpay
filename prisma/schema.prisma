generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clients   Client[]
  payments  Payment[]
}

model Client {
  id            String         @id @default(uuid())
  fullName      String
  phoneNumber   String
  brokerageFirm String
  city          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  brokers       ClientBroker[]
  payments      Payment[]
  transactions  Transaction[]
}

model Stock {
  id           String        @id @default(uuid())
  symbol       String        @unique
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
}

model Broker {
  id           String         @id @default(uuid())
  name         String         @unique
  code         String         @unique
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  clients      ClientBroker[]
  transactions Transaction[]
}

model ClientBroker {
  id        String   @id @default(uuid())
  clientId  String
  brokerId  String
  createdAt DateTime @default(now())
  broker    Broker   @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, brokerId])
}

model Transaction {
  id               String          @id @default(uuid())
  type             TransactionType
  lots             Int
  price            Float
  date             DateTime
  brokerageFirm    String?
  commission       Float?
  profit           Float?
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  clientId         String
  stockId          String
  buyTransactionId String?
  brokerId         String?
  broker           Broker?         @relation(fields: [brokerId], references: [id])
  buyTransaction   Transaction?    @relation("BuySellReference", fields: [buyTransactionId], references: [id])
  sellTransactions Transaction[]   @relation("BuySellReference")
  client           Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  stock            Stock           @relation(fields: [stockId], references: [id], onDelete: Cascade)
}

model Payment {
  id          String        @id @default(uuid())
  amount      Float
  date        DateTime
  description String?
  method      PaymentMethod @default(CASH)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  clientId    String
  userId      String
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  BUY
  SELL
}

enum PaymentMethod {
  CASH
  BANK
  CREDIT_CARD
  CHECK
  OTHER
}
